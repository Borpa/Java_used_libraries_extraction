    #for software in soft_list:
    #    file1 = software["filename"]
    #    file1_type = software["type"]
    #    file1_path = software["filepath"]
    #    imports_list1 = software["imports"]
    #    unique_libraries1 = software["unique_libraries"]
    #    project1 = software["project_name"]

    #    for comparison in full_list:
    #        project2 = comparison["project_name"]
    #        if (project1 == project2): continue

    #        file2 = comparison["filename"]
    #        file2_type = comparison["type"]
    #        file2_path = comparison["filepath"]
    #        imports_list2 = comparison["imports"]
    #        unique_libraries2 = comparison["unique_libraries"]

    #        if len(imports_list1) != 0:
    #            same_imports_perc = len(set(imports_list1) &
    #                                     set(imports_list2)) / len(imports_list1) * 100
    #        else:
    #            same_imports_perc = 0

    #        if  len(unique_libraries1) != 0:
    #            same_uniques_perc = len(set(unique_libraries1) &
    #                                     set(unique_libraries2)) / len(unique_libraries1) * 100
    #        else:
    #            same_uniques_perc = 0

    #        #if file1_type != file2_type and same_imports_perc < 70 or same_uniques_perc < 65: continue
    #        if file1_type != file2_type and same_imports_perc < 95: continue
    #        #if file1_type == file2_type and same_imports_perc > 30 or same_uniques_perc > 35: continue
    #        if file1_type == file2_type and same_imports_perc > 5: continue

    #        result.append([file1, file1_type, file2, file2_type, 
    #                         same_imports_perc, same_uniques_perc, 
    #                        project1, project2, file1_path, file2_path])

    # return result


    #with open("imported_libraries.json", "r") as f:
    #    data = json.load(f)

    #software_list = data["software"]

    
    #pair_list = []
    #pairs = [i for i in range(1, num_of_projects)]
    #for i in range(1, num_of_projects):
    #    new_pair = pairs.copy()
    #    pair_list.append(new_pair)
    #    del pairs[0]

    #list_len = len(pair_list)
    #pair_list = [pair_list[:(list_len // 3)+1], 
    #             pair_list[(list_len // 3)+1:2*(list_len // 3)+1], 
    #             pair_list[2*(list_len // 3)+1:list_len]]

    
    #header = ["file1", "file1_type", "file2", "file2_type", "imports, %",
    #           "unique libraries, %", "project1", "project2", "file1_path", "file2_path"]

    #soft_lists = np.array_split(software_list, 3)
    #with Pool() as pool:
    #    result = pool.starmap(calculate_similarity,
    #                                              zip(soft_lists, repeat(software_list)))
